// docs: https://pris.ly/d/prisma-schema
// run `npx prisma migrate dev --name {migration_name}` to apply changes to the database
// npx prisma generate to update types

// before initialization
// CREATE EXTENSION postgis;
// after initialization
// CREATE INDEX idx_gist_location ON "Location" USING gist(coordinates);

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

/// Contains fields common for all types of users
model User {
  user_id           Int        @id @default(autoincrement())
  email             String     @unique
  email_validated   Boolean    @default(false)
  password_hash     String?
  display_name      String?
  external_id       String?    @unique /// unique identifier from external authentication service
  external_type     String? /// type of external authentication (google, microsoft, apple...)
  locale            String     @default("sl")
  avatar_url        String?
  last_login        DateTime?
  registration_date DateTime   @default(now())
  mentor            Mentor?
  user_type         UserType   @relation(fields: [user_type_id], references: [user_type_id])
  user_type_id      Int
  caregiver         Caregiver?
}

model UserType {
  user_type_id Int     @id @default(autoincrement()) @db.SmallInt
  user_type    String  @unique
  description  String?
  User         User[]
}

model Mentor {
  mentor_id     Int         @id @default(autoincrement())
  first_name    String
  last_name     String
  date_of_birth DateTime
  emso          String      @unique @db.Char(13)
  phone_number  String      @unique @db.VarChar(20)
  gender        Gender
  date_created  DateTime    @default(now())
  user          User?       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id       Int?        @unique
  Caregiver     Caregiver[]
}

model Caregiver {
  caregiver_id    Int              @id @default(autoincrement())
  first_name      String
  last_name       String
  date_of_birth   DateTime
  emso            String           @unique @db.Char(13)
  phone_number    String           @unique @db.VarChar(20)
  gender          Gender
  additional_info String?
  date_created    DateTime         @default(now())
  user            User?            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         Int?             @unique
  location        Location?        @relation(fields: [location_id], references: [location_id])
  location_id     String?
  mentor          Mentor?          @relation(fields: [mentor_id], references: [mentor_id], onDelete: SetNull)
  mentor_id       Int?
  Session         Session[]
  Availibility    Availibility[]
  CaregiverSkill  CaregiverSkill[]
}

model Patient {
  patient_id    Int           @id @default(autoincrement())
  first_name    String
  last_name     String
  date_of_birth DateTime
  emso          String        @unique @db.Char(13)
  email         String?
  phone_number  String?       @unique @db.VarChar(20)
  gender        Gender
  details       String?
  date_created  DateTime      @default(now())
  location      Location?     @relation(fields: [location_id], references: [location_id])
  location_id   String?
  Session       Session[]
  Contact       Contact[]
  Requirement   Requirement[]
}

model Session {
  session_id   Int       @id @default(autoincrement())
  start_time   DateTime  @default(now())
  duration     DateTime?
  notes        String?
  patient      Patient   @relation(fields: [patient_id], references: [patient_id])
  patient_id   Int
  caregiver    Caregiver @relation(fields: [caregiver_id], references: [caregiver_id])
  caregiver_id Int
}

model Location {
  location_id String                              @id
  coordinates Unsupported("geometry(Point,4326)") // change this when doing a full migration from render
  place_name  String
  // street        String
  // street_number String
  // city          String
  // country       String
  Caregiver   Caregiver[]
  Patient     Patient[]
}

model Contact {
  contact_id   Int     @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String?
  phone_number String? @unique @db.VarChar(20)
  patient      Patient @relation(fields: [patient_id], references: [patient_id])
  patient_id   Int
}

model Term {
  term_id      Int            @id @default(autoincrement())
  start_date   DateTime
  end_date     DateTime?
  Availibility Availibility[]
}

model Availibility {
  availibilty_id Int       @id @default(autoincrement())
  day_of_week    Int
  start_time     DateTime
  end_time       DateTime
  term           Term      @relation(fields: [term_id], references: [term_id])
  term_id        Int
  caregiver      Caregiver @relation(fields: [caregiver_id], references: [caregiver_id], onDelete: Cascade)
  caregiver_id   Int
}

model Skill {
  skill_id       Int              @id @default(autoincrement()) @db.SmallInt
  skill_name     String
  description    String?
  CaregiverSkill CaregiverSkill[]
  Requirement    Requirement[]
}

model CaregiverSkill {
  caregiver_id Int
  skill_id     Int
  caregiver    Caregiver @relation(fields: [caregiver_id], references: [caregiver_id])
  skill        Skill     @relation(fields: [skill_id], references: [skill_id])

  @@id([caregiver_id, skill_id])
}

// Requirement

model Requirement {
  patient_id Int
  skill_id   Int
  patient    Patient @relation(fields: [patient_id], references: [patient_id])
  skill      Skill   @relation(fields: [skill_id], references: [skill_id])

  @@id([patient_id, skill_id])
}
